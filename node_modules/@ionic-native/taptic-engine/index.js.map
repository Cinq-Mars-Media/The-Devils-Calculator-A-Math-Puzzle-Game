{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/taptic-engine/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;IAiCtC,gCAAiB;;;;IACjD;;;OAGG;;;;;IAEH,gCAAS;;;;;QACP,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,mCAAY;;;;;;cAAC,OAEZ;QACC,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,6BAAM;;;;;;cAAC,OAAgD;QACrD,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,4CAAqB;;;;;QACnB,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,8CAAuB;;;;;QACrB,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,0CAAmB;;;;;QACjB,MAAM,CAAC;KACR;;gBA5DF,UAAU;;;QAMR,OAAO,EAAE;;;;iDAGT;;QAQA,OAAO,EAAE;;;;oDAKT;;QAQA,OAAO,EAAE;;;;8CAGT;;QAMA,OAAO,EAAE;;;;6DAGT;;QAMA,OAAO,EAAE;;;;+DAGT;;QAMA,OAAO,EAAE;;;;2DAGT;;;;;;;;;;;;;;;;;;;;;;;;IA3DU,YAAY;QARxB,MAAM,CAAC;YACN,UAAU,EAAE,cAAc;YAC1B,MAAM,EAAE,8BAA8B;YACtC,SAAS,EAAE,cAAc;YACzB,IAAI,EAAE,gEAAgE;YACtE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,YAAY,EA4DxB;uBA9FD;EAkCkC,iBAAiB;SAAtC,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Taptic Engine\n * @description\n * An Ionic plugin to use Taptic Engine API on iPhone 7, 7 Plus or newer.\n *\n * @usage\n * ```typescript\n * import { TapticEngine } from '@ionic-native/taptic-engine';\n *\n * ...\n *\n * constructor(private taptic: TapticEngine) { }\n *\n * ...\n *\n * this.taptic.selection();\n *\n * this.taptic.notification();\n *\n * this.taptic.impact();\n *\n * ```\n */\n@Plugin({\n  pluginName: 'TapticEngine',\n  plugin: 'cordova-plugin-taptic-engine',\n  pluginRef: 'TapticEngine',\n  repo: 'https://github.com/EddyVerbruggen/cordova-plugin-taptic-engine',\n  platforms: ['iOS']\n})\n@Injectable()\nexport class TapticEngine extends IonicNativePlugin {\n  /**\n   * Use selection feedback generators to indicate a change in selection.\n   * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n   */\n  @Cordova()\n  selection(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Use this to indicate success/failure/warning to the user.\n   * @param options {Object} should be of the type { type: 'success' } (or 'warning'/'error')\n   * @param {'success' | 'warning' | 'error'} options.type\n   * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n   */\n  @Cordova()\n  notification(options: {\n    type: 'success' | 'warning' | 'error';\n  }): Promise<any> {\n    return;\n  }\n\n  /**\n   * Use this to indicate success/failure/warning to the user.\n   * @param options {Object} should be of the type { style: 'light' } (or 'medium'/'heavy')\n   * @param {'light' | 'medium' | 'heavy'} options.type\n   * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n   */\n  @Cordova()\n  impact(options: { style: 'light' | 'medium' | 'heavy' }): Promise<any> {\n    return;\n  }\n\n  /**\n   * Tell the taptic engine that a gesture for a selection change is starting.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  gestureSelectionStart(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Tell the taptic engine that a selection changed during a gesture.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  gestureSelectionChanged(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Tell the taptic engine we are done with a gesture. This needs to be called lest resources are not properly recycled.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  gestureSelectionEnd(): Promise<any> {\n    return;\n  }\n}\n"]}